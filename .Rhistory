runApp('cytocluster')
runApp('cytocluster')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
source("http://bioconductor.org/biocLite.R")
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
?rhandsontable
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
?sample_tags.upload
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
a = "20170403-01 t054 KI-01 unstim 167 2000s_01.FCS_live_viSNE.fcs"
grep(pattern = ".*FCS", a)
grep(pattern = ".*FCS", a, value = T)
grep(pattern = ".*FCS", a, value = T, fixed = TRUE)
sub("FCS.*", "", a)
sub("\\..*", "", a)
sub("_.*", "", a)
sub("_live.*", "", a)
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runGitHub("cytocluster", "kordastilab")
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
pkgsB = c("TxDb.Hsapiens.UCSC.hg19.knownGene")
source("http://bioconductor.org/biocLite.R")
rownames(installed.packages())
for (pkg in pkgsB){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
biocLite(pkg)
library(pkg, character.only = TRUE, quitely=TRUE)
}else{
library(pkg, character.only = TRUE, quitely=TRUE)
}
}
?library
rownames(installed.packages())
pkgsB = c("TxDb.Hsapiens.UCSC.hg19.knownGene",
"GenomicRanges")
for (pkg in pkgsB){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
biocLite(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
g = genes(TxDb.Hsapiens.UCSC.hg19.knownGene) ## get genes
g
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords %>% head
?makeGRangesFromDataFrame
coords = coords %>% select(Chromosome, Start.point, End.point) %>%
rename(chr=Chromosome, start=Start.point, end=End.point)
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% select(Chromosome, Start.point, End.point) %>%
rename(chr=Chromosome, start=Start.point, end=End.point) %>% unique
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point) %>% unique
makeGRangesFromDataFrame(coords%>%head%>%data.frame())
coords %>% head
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
View(coords)
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
makeGRangesFromDataFrame(coords%>%head%>%data.frame())
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
coords %>% head
g %>% head
?genes
x1 = read.table(text="chr start end name
1    2    5   A
2   10    15  B
3   27    30  C",header=T)
x2 = read.table(text="chr start end   name
1   1    1    3       AA
2   2    9    16      BB
3   3    28   29      CC",header=T)
gr1 = with(x1, GRanges(chr, IRanges(start = start, end = end, names = name)))
gr2 = with(x2, GRanges(chr, IRanges(start = start, end = end, names = name)))
gr2
findOverlaps(query = gr1, subject = gr2, type = "within")
gre1
gr1
gr2
?findOverlapPairs
findOverlapPairs(gr1, gr2)
findOverlaps(gr1, gr2)
poverlaps(gr1, gr2)
overlapsAny(gr1, gr2)
x1 = read.table(text="chr start end name
1    2    5   A
2   10    15  B
3   27    30  C",header=T)
x2 = read.table(text="chr start end   name
1   1    1    3       AA
1   3    4    16      BB
3   3    28   29      CC",header=T)
# Make GRanges object
gr1 = with(x1, GRanges(chr, IRanges(start = start, end = end, names = name)))
gr2 = with(x2, GRanges(chr, IRanges(start = start, end = end, names = name)))
gr1
gr2
x1 = read.table(text="chr start end name
1    2    5   A
2   10    15  B
3   27    30  C",header=T)
x2 = read.table(text="chr start end   name
1   1    3       AA
1   3    4      BB
3   28   29      CC",header=T)
gr1 = with(x1, GRanges(chr, IRanges(start = start, end = end, names = name)))
gr2 = with(x2, GRanges(chr, IRanges(start = start, end = end, names = name)))
gr1
gr2
findOverlapPairs(gr1, gr2)
findOverlap(gr1, gr2)
findOverlaps(gr1, gr2)
overlaps = findOverlaps(query = gr1, subject = gr2)
overlaps.df = data.frame(x1[queryHits(type1),], x2[subjectHits(type1),])
queryHits(overlaps)
subjectHits(overlaps)
overlaps.df = data.frame(x1[queryHits(overlaps),], x2[subjectHits(overlaps),])
overlaps.df
overlaps = findOverlaps(query = coords, subject = g)
overlaps.df = data.frame(x1[queryHits(overlaps),], x2[subjectHits(overlaps),])
View(overlaps.df)
g >%% head
g %>% head
coords %>% head
Reduce(g) %>% head
overlaps %>% head
coords=1
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
coords[1,]
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),])
View(overlaps.df)
overlaps.df %>% str()
overlaps.df %>% head
overlaps.df = overlaps.df %>% mutate(gene_id=as.numeric(gene_id))
View(overlaps.df)
library(biomaRt)
?useMart
?getBMlist
getBMlist()
?useMart
listMarts()
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
getBMlist(mart)
mart
listFilters(mart)
mapping <- getBM(attributes = c("entrezgene", "hgnc_symbol"), mart = mart)
mapping %>% head
mapping %>% subset(hgnc_symbol=="TP53")
overlaps = findOverlaps(query = coords, subject = g) ## Find overlaps between the two sets of coordinates
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),]) ## Get the table of ovelaps
overlaps.df = overlaps.df %>%
dplyr::mutate(gene_id=as.numeric(gene_id)) %>%
dplyr::rename(entrezgene=gene_id) ## make entrez id number and rename
overlaps.df %>% left_join(mapping) %>% head
overlaps.df %>% left_join(mapping) %>% select(hgnc_symbol) %>% unique %>% nrow
overlaps.df %>% left_join(mapping) %>% dplyr::select(hgnc_symbol) %>% unique %>% nrow
overlaps.df = overlaps.df %>% left_join(mapping)
overlaps = findOverlaps(query = coords, subject = g) ## Find overlaps between the two sets of coordinates
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),]) ## Get the table of ovelaps
overlaps.df = overlaps.df %>%
dplyr::mutate(gene_id=as.numeric(gene_id)) %>%
dplyr::rename(entrezgene=gene_id) ## make entrez id number and rename
mapping = mapping %>% subset(entrezgene%in%overlaps.df$entrezgene)
overlaps.df = overlaps.df %>% left_join(mapping)
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
mapping <- getBM(attributes = c("entrezgene", "hgnc_symbol"), mart = mart)
mapping = mapping %>% dplyr::group_by(entrezgene) %>% dplyr::summarise(hgnc_symbol=paste0(unique(hgnc_symbol), collapse = ","))
overlaps = findOverlaps(query = coords, subject = g) ## Find overlaps between the two sets of coordinates
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),]) ## Get the table of ovelaps
overlaps.df = overlaps.df %>%
dplyr::mutate(gene_id=as.numeric(gene_id)) %>%
dplyr::rename(entrezgene=gene_id) ## make entrez id number and rename
overlaps.df = overlaps.df %>% left_join(mapping)
overlaps.df %>% head
View(overlaps.df)
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords.df = coords
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
coords.df %>% head
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
coords.df %>% head
overlaps.df %>% head
## Read in your coordinates -- change path to your file
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords %>% key=paste(seqnames,start,end, sep=".")
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords %>% key=paste(chr,start,end, sep=".")
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords %>% mutate(key=paste(chr,start,end, sep="."))
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique %>% head
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
intergenic_coords = coords.df %>% subset(!key%in%coords_in_overlaps)
coords.df %>% head
overlaps.df %>% head
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
intergenic_coords = coords.df %>% subset(!key%in%coords_in_overlaps) %>% dplyr::select(-key) %>%
dplyr::rename(seqnames=chr)
## Get the intergenic regions
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
intergenic_coords = coords.df %>% subset(!key%in%coords_in_overlaps) %>% dplyr::select(-key) %>%
dplyr::rename(seqnames=chr) %>% dplyr::mutate(note="not in hg19 genes")
rbind_all(overlaps.df, intergenic_coords) %>% head
bind_rows(overlaps.df, intergenic_coords) %>% head
bind_rows(overlaps.df, intergenic_coords) %>% tail
######################################################
##    get gene names for a set of coordinates
######################################################
pkgsR = c("dplyr")
for (pkg in pkgsR){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
install.packages(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
## Same as above for Bioconductor packages
pkgsB = c("TxDb.Hsapiens.UCSC.hg19.knownGene",
"GenomicRanges",
"biomaRt")
source("http://bioconductor.org/biocLite.R")
for (pkg in pkgsB){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
biocLite(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
g = genes(TxDb.Hsapiens.UCSC.hg19.knownGene) ## get genes
## Read in your coordinates -- change path to your file
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords %>% mutate(key=paste(chr,start,end, sep="."))
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
overlaps = findOverlaps(query = coords, subject = g) ## Find overlaps between the two sets of coordinates
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),]) ## Get the table of ovelaps
overlaps.df = overlaps.df %>%
dplyr::mutate(gene_id=as.numeric(gene_id)) %>%
dplyr::rename(entrezgene=gene_id) ## make entrez id number and rename
## Get gene mapping of entrez and gene symbols
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
mapping <- getBM(attributes = c("entrezgene", "hgnc_symbol"), mart = mart)
mapping = mapping %>% dplyr::group_by(entrezgene) %>% dplyr::summarise(hgnc_symbol=paste0(unique(hgnc_symbol), collapse = ","))
## Join symbols and entrez ids in our overlaps
overlaps.df = overlaps.df %>% left_join(mapping)
## Get the intergenic regions
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
lonely_coords = coords.df %>% subset(!key%in%coords_in_overlaps) %>% dplyr::select(-key) %>%
dplyr::rename(seqnames=chr) %>% dplyr::mutate(note="not in hg19 genes")
## make final table
finaltb = bind_rows(overlaps.df, intergenic_coords)
finaltb = finaltb %>% dplyr::rename(chr=seqnames, chr.1=seqnames.1)
write.table(finaltb, file="~/Desktop/coords2genes_hg19.tsv", row.names = F, sep = "\t", quote = "\t")
######################################################
##    get gene names for a set of coordinates
######################################################
pkgsR = c("dplyr")
for (pkg in pkgsR){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
install.packages(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
## Same as above for Bioconductor packages
pkgsB = c("TxDb.Hsapiens.UCSC.hg19.knownGene",
"GenomicRanges",
"biomaRt")
source("http://bioconductor.org/biocLite.R")
for (pkg in pkgsB){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
biocLite(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
g = genes(TxDb.Hsapiens.UCSC.hg19.knownGene) ## get genes
## Read in your coordinates -- change path to your file
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords %>% mutate(key=paste(chr,start,end, sep="."))
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
overlaps = findOverlaps(query = coords, subject = g) ## Find overlaps between the two sets of coordinates
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),]) ## Get the table of ovelaps
overlaps.df = overlaps.df %>%
dplyr::mutate(gene_id=as.numeric(gene_id)) %>%
dplyr::rename(entrezgene=gene_id) ## make entrez id number and rename
## Get gene mapping of entrez and gene symbols
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
mapping <- getBM(attributes = c("entrezgene", "hgnc_symbol"), mart = mart)
mapping = mapping %>% dplyr::group_by(entrezgene) %>% dplyr::summarise(hgnc_symbol=paste0(unique(hgnc_symbol), collapse = ","))
## Join symbols and entrez ids in our overlaps
overlaps.df = overlaps.df %>% left_join(mapping)
## Get the intergenic regions
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
lonely_coords = coords.df %>% subset(!key%in%coords_in_overlaps) %>% dplyr::select(-key) %>%
dplyr::rename(seqnames=chr) %>% dplyr::mutate(note="not in hg19 genes")
## make final table
finaltb = bind_rows(overlaps.df, lonely_coords)
finaltb = finaltb %>% dplyr::rename(chr=seqnames, chr.1=seqnames.1)
write.table(finaltb, file="~/Desktop/coords2genes_hg19.tsv", row.names = F, sep = "\t", quote = "\t")
######################################################
##    get gene names for a set of coordinates
######################################################
pkgsR = c("dplyr")
for (pkg in pkgsR){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
install.packages(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
## Same as above for Bioconductor packages
pkgsB = c("TxDb.Hsapiens.UCSC.hg19.knownGene",
"GenomicRanges",
"biomaRt")
source("http://bioconductor.org/biocLite.R")
for (pkg in pkgsB){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
biocLite(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
g = genes(TxDb.Hsapiens.UCSC.hg19.knownGene) ## get genes
## Read in your coordinates -- change path to your file
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords %>% mutate(key=paste(chr,start,end, sep="."))
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
overlaps = findOverlaps(query = coords, subject = g) ## Find overlaps between the two sets of coordinates
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),]) ## Get the table of ovelaps
overlaps.df = overlaps.df %>%
dplyr::mutate(gene_id=as.numeric(gene_id)) %>%
dplyr::rename(entrezgene=gene_id) ## make entrez id number and rename
## Get gene mapping of entrez and gene symbols
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
mapping <- getBM(attributes = c("entrezgene", "hgnc_symbol"), mart = mart)
mapping = mapping %>% dplyr::group_by(entrezgene) %>% dplyr::summarise(hgnc_symbol=paste0(unique(hgnc_symbol), collapse = ","))
## Join symbols and entrez ids in our overlaps
overlaps.df = overlaps.df %>% left_join(mapping)
## Get the intergenic regions
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
lonely_coords = coords.df %>% subset(!key%in%coords_in_overlaps) %>% dplyr::select(-key) %>%
dplyr::rename(seqnames=chr) %>% dplyr::mutate(note="not in hg19 genes")
## make final table
finaltb = bind_rows(overlaps.df, lonely_coords)
finaltb = finaltb %>% dplyr::rename(chr=seqnames, chr.1=seqnames.1)
write.table(finaltb, file="~/Desktop/coords2genes_hg19.tsv", row.names = F, sep = "\t", quote = F)
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
mapping <- getBM(attributes = c("entrezgene", "hgnc_symbol"), mart = mart)
mapping = mapping %>% dplyr::group_by(entrezgene) %>% dplyr::summarise(hgnc_symbol=paste0(unique(hgnc_symbol), collapse = ","))
## Join symbols and entrez ids in our overlaps
overlaps.df = overlaps.df %>% left_join(mapping)
## Get the intergenic regions
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
lonely_coords = coords.df %>% subset(!key%in%coords_in_overlaps) %>% dplyr::select(-key) %>%
dplyr::rename(seqnames=chr) %>% dplyr::mutate(note="not in hg19 genes")
## make final table
finaltb = bind_rows(overlaps.df, lonely_coords)
finaltb = finaltb %>% dplyr::rename(chr=seqnames, chr.1=seqnames.1)
overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% count(key) %>% arrange(desc(n)) %>% ehad
overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% count(key) %>% arrange(desc(n)) %>% head()
overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% subset(key=="chr5.140768676.140768722")
gr[seqnames(gr) %in% c(56114, 56113)]
g[seqnames(g) %in% c(56114, 56113)]
g[gene_id(g) %in% c(56114, 56113)]
g[rownames(g) %in% c(56114, 56113)]
g %>% head
g[g$gene_id %in% c(56114, 56113)]
######################################################
##    get gene names for a set of coordinates
######################################################
pkgsR = c("dplyr")
for (pkg in pkgsR){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
install.packages(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
## Same as above for Bioconductor packages
pkgsB = c("TxDb.Hsapiens.UCSC.hg19.knownGene",
"GenomicRanges",
"biomaRt")
source("http://bioconductor.org/biocLite.R")
for (pkg in pkgsB){ ## install the package is not installed already
if(!pkg %in% rownames(installed.packages())){
biocLite(pkg)
library(pkg, character.only = TRUE, quietly=TRUE)
}else{
library(pkg, character.only = TRUE, quietly=TRUE)
}
}
g = genes(TxDb.Hsapiens.UCSC.hg19.knownGene) ## get genes
## Read in your coordinates -- change path to your file
coords = read.table("~/Desktop/Extracted_data_m6A.txt", header = T, sep = "\t")
coords = coords %>% dplyr::select(Chromosome, Start.point, End.point, Strand) %>%
dplyr::rename(chr=Chromosome, start=Start.point, end=End.point, strand=Strand) %>% unique
coords.df = coords %>% mutate(key=paste(chr,start,end, sep="."))
coords = makeGRangesFromDataFrame(coords%>%data.frame()) ## make it granges so we can intersect
overlaps = findOverlaps(query = coords, subject = g) ## Find overlaps between the two sets of coordinates
overlaps.df = data.frame(coords[queryHits(overlaps),], g[subjectHits(overlaps),]) ## Get the table of ovelaps
overlaps.df = overlaps.df %>%
dplyr::mutate(gene_id=as.numeric(gene_id)) %>%
dplyr::rename(entrezgene=gene_id) ## make entrez id number and rename
## Get gene mapping of entrez and gene symbols
mart=useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
mapping <- getBM(attributes = c("entrezgene", "hgnc_symbol"), mart = mart)
mapping = mapping %>% dplyr::group_by(entrezgene) %>% dplyr::summarise(hgnc_symbol=paste0(unique(hgnc_symbol), collapse = ","))
## Join symbols and entrez ids in our overlaps
overlaps.df = overlaps.df %>% left_join(mapping)
## Get the intergenic regions
coords_in_overlaps = overlaps.df %>% mutate(key=paste(seqnames,start,end, sep=".")) %>% .$key %>% unique
lonely_coords = coords.df %>% subset(!key%in%coords_in_overlaps) %>% dplyr::select(-key) %>%
dplyr::rename(seqnames=chr) %>% dplyr::mutate(note="not in hg19 genes")
## make final table
finaltb = bind_rows(overlaps.df, lonely_coords)
finaltb = finaltb %>% dplyr::rename(chr=seqnames, chr.1=seqnames.1)
write.table(finaltb, file="~/Desktop/coords2genes_hg19.tsv", row.names = F, sep = "\t", quote = F)
finaltb %>% head
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/cytocluster')
install.packages("glue")
